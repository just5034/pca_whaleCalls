[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Principal Component Denoising (Whale Calls)",
    "section": "",
    "text": "1 Introduction\nMaritime technological advancements in recent years have enhanced marine mammal detection / surveying efforts. In particular, the introduction of passive and active bio-acoustic monitoring via buoy networks have allowed for the current shipping industry to identify optimal transport routes while minimizing the impact of commercial shipping on the ocean’s environment. One challenge that is frequently encountered in the efforts to identify the presence of marine mammals is the presence of heavy audio interference picked up by the deployed buoy microphones. The interference itself comes in many different forms, and as a result, efforts to train a model that can match human performance in the detection / labeling of said calls often encounter sub-optimal model performance issues. To this end, there exists a present gap in the state of the art for a denoising algorithm that operates pre-hoc (independent of model training). From this the motivation for our project is derived. We seek to use this project to propose an algorithmic solution to this issue and provide a visual exploration of the effects of our solution on the dataset to further dive into both the quality of the dataset and any further implications.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nThe data we will be using is comprised of 30,000 two-second .aiff audio files that have been converted to .png images. The audio itself was collected at a sample rate of 2kHz In addition, the observations (being any one such image) have a corresponding Boolean label in a csv file indicating whether or not the image actually contains a whale call.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nInspection of the data folder indicates that all 30,000 of the training images to be used for the purposes of our analyses are included. Furthermore, we check for missingness in the dataframe containing the labels for our data points, and find that there is no missing data. This is unsurprising as the data was processed and distributed by a reputable Kaggle competition host.\n\n\nCode\nlibrary(glue)\n\ntraining_labels &lt;- read.csv(\"data/train.csv\")\nnumber_missing &lt;- sum(is.na(training_labels))\ncat(glue(\"Number of missing values: {number_missing}\\n\"))\n\n\nNumber of missing values: 0\n\n\nOne more key characteristic of the data we want to be concerned with is the class balance. That is, what is the ratio of images with a whale call contained within (label = 1) to the images without a call (label = 0)?\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\n# Assuming your DataFrame is named training_labels\nggplot(training_labels, aes(x = factor(label))) +\n  geom_bar() +\n  labs(\n    title = \"Distribution of Labels\",\n    x = \"Label\",\n    y = \"Count\"\n  )\n\n\n\n\n\n\n\n\n\nObserve that the vast majority of observations do not contain a call. For our purposes, we will want to keep a small portion of the observations while adjusting for the class imbalance via under sampling.\nWe will keep 500 observations from each class and create a new random subset of the original dataset.\n\n\nCode\n# # Assuming your DataFrame is named training_labels\n# \n# # Subset the DataFrame into two groups: label == 0 and label == 1\n# label_0 &lt;- training_labels[training_labels$label == 0, ]\n# label_1 &lt;- training_labels[training_labels$label == 1, ]\n# \n# # Randomly sample 500 rows from each group\n# set.seed(123)  # For reproducibility\n# sampled_label_0 &lt;- label_0[sample(nrow(label_0), 500), ]\n# sampled_label_1 &lt;- label_1[sample(nrow(label_1), 500), ]\n# \n# # Combine the sampled subsets into a single DataFrame\n# sampled_training_labels &lt;- rbind(sampled_label_0, sampled_label_1)\n\n\nBelow is the code we use to delete the images in our data directory that do not have a label observation in our filtered subset dataframe.\n\n\nCode\n# # Set the working directory to where the .png files and train.csv are located\n# setwd(\"data/\")\n# \n# # Read the train.csv file\n# train_df &lt;- read.csv(\"train.csv\")\n# \n# # Extract the list of image names from train.csv\n# image_files_to_keep &lt;- train_df$image_name  # Adjust column name if necessary\n# \n# # Get the list of all .png files in the current directory\n# all_png_files &lt;- list.files(pattern = \"\\\\.png$\")\n# \n# # Identify files to delete (not in train.csv)\n# files_to_delete &lt;- setdiff(all_png_files, image_files_to_keep)\n# \n# # Delete the unwanted .png files\n# if (length(files_to_delete) &gt; 0) {\n#   file.remove(files_to_delete)\n#   message(length(files_to_delete), \" files deleted.\")\n# } else {\n#   message(\"No files to delete.\")\n# }",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  }
]