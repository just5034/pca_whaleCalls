---
title: "Data Preprocessing Pipeline"
editor: visual
---

```{r, include=FALSE}

library(png)
library(ggplot2)
library(dplyr)
library(imager)



set.seed(123)


setwd("../data")

file_paths <- read.csv("train.csv")

sampled_file_paths <- file_paths |> 
  group_by(label) |> 
  slice_sample(n=30) |> 
  ungroup()

sampled_file_paths$image_name <- apply(sampled_file_paths, 1, function(row) {
  paste0("../data/", row["image_name"])
})

# Directory containing the PNG files
image_dir <- "../data" # Replace with your folder path
image_files <- list.files(image_dir, pattern = "\\.png$", full.names = TRUE)


# Initialize a list to store image pixel vectors
image_data <- list()

# Process each image file
for (i in seq_len(nrow(sampled_file_paths))) {
  tryCatch({
    # Load the image
    img_path <- sampled_file_paths[i,1]
    image <- load.image(img_path[[1,1]])
    image <- as.array(image)
    
    # Remove the fourth channel (assumes RGBA input)
    image <- image[,,,1:3]
    
    image_cimg <- as.cimg(image)
    
    gray_image <- grayscale(image_cimg)
    
    # Flatten the grayscale image into a vector and store in the list
    image_data[[i]] <- as.vector(gray_image)
  }, error = function(e) {
    # Log the error and skip the problematic file
    warning("Error processing file: ", file, "\n", conditionMessage(e))
  })
}

# Combine all vectors into a matrix (each row is an image)
if (length(image_data) > 0) {
  image_matrix <- do.call(rbind, image_data)
  # Print the dimensions of the resulting matrix
  cat("The resulting image matrix has dimensions:", dim(image_matrix), "\n")
} else {
  cat("No valid images processed.\n")
}

# write.csv(image_matrix, "image_matrix.csv", row.names = FALSE)

```

```{r}

# Assuming `image_matrix` is your image matrix
# Dimensions of the original image
image_height <- 255
image_width <- 255

# Function to process and transpose each image
process_image <- function(image_vector) {
  # Reshape the vector into a matrix (transposing in the process)
  image_matrix <- matrix(image_vector, nrow = image_width, ncol = image_height, byrow = FALSE)
  return(as.vector(image_matrix))  # Flatten back into a vector
}

# Apply the transpose fix to all rows (images) in the image matrix
fixed_image_matrix <- t(apply(image_matrix, 1, process_image))

# Optional: Display the first image from the fixed matrix
first_image_vector <- fixed_image_matrix[31, ]
first_image_matrix <- matrix(first_image_vector, nrow = image_width, ncol = image_height, byrow = FALSE)
first_image_cimg <- as.cimg(first_image_matrix)

# Display the corrected first image
plot(first_image_cimg, main = "Corrected First Image")

```
```{r}

matrix_copy <- image_matrix

centered_matrix <- scale(matrix_copy, center = TRUE, scale = FALSE)

svd_result <- svd(centered_matrix)

U <- svd_result$u

V <- svd_result$v

D <- svd_result$d

D_matrix <- diag(D)

eigenvalues <- D^2

```


```{r}

pc_images <- t(svd_result$v)

```

```{r}

# Apply the transpose fix to all rows (images) in the image matrix
fixed_image_matrix <- t(apply(pc_images, 1, process_image))

# Optional: Display the first image from the fixed matrix
first_image_vector <- fixed_image_matrix[1, ]
first_image_matrix <- matrix(first_image_vector, nrow = image_width, ncol = image_height, byrow = FALSE)
first_image_cimg <- as.cimg(first_image_matrix)

# Display the corrected first image
plot(first_image_cimg, main = "Corrected First Image")

```


```{r}

reconstruction <- U %*% D_matrix %*% pc_images

```


```{r}

# Apply the transpose fix to all rows (images) in the image matrix
fixed_image_matrix <- t(apply(reconstruction, 1, process_image))

# Optional: Display the first image from the fixed matrix
first_image_vector <- fixed_image_matrix[33, ]
first_image_matrix <- matrix(first_image_vector, nrow = image_width, ncol = image_height, byrow = FALSE)
first_image_cimg <- as.cimg(first_image_matrix)

# Display the corrected first image
plot(first_image_cimg, main = "Corrected First Image")

```

```{r}

# Function to process a single 255x255 matrix
process_matrix <- function(flat_vector, percentile_func) {
  # Reshape to 255x255
  img_matrix <- matrix(flat_vector, nrow=255, ncol=255)
  
  # Process each column
  for(j in 1:255) {
    thresh_val <- percentile_func(img_matrix[,j])
    # Subtract threshold value and cap at 0
    img_matrix[,j] <- pmax(img_matrix[,j] - thresh_val, 0)
  }
  
  # Return flattened processed matrix
  return(as.vector(img_matrix))
}


# Apply to each row of pc_images

processed_pc_images_median <- matrix(0, nrow=60, ncol=65025)

processed_pc_images_25th <- matrix(0, nrow=60, ncol=65025)

processed_pc_images_75th <- matrix(0, nrow=60, ncol=65025)


for(i in 1:60) {
  processed_pc_images_median[i,] <- process_matrix(pc_images[i,], median)
  
  processed_pc_images_25th[i,] <- process_matrix(pc_images[i,], function(x) quantile(x, 0.25))
  
  processed_pc_images_75th[i,] <- process_matrix(pc_images[i,], function(x) quantile(x, 0.75))
}

```


```{r}

reconstruction_median <- svd_result$u %*% D_matrix %*% processed_pc_images_median
reconstruction_25th <- svd_result$u %*% D_matrix %*% processed_pc_images_25th
reconstruction_75th <- svd_result$u %*% D_matrix %*% processed_pc_images_75th

```



```{r}

# Apply the transpose fix to all rows (images) in the image matrix
fixed_image_matrix <- t(apply(reconstruction_75th, 1, process_image))

# Optional: Display the first image from the fixed matrix
first_image_vector <- fixed_image_matrix[31, ]
first_image_matrix <- matrix(first_image_vector, nrow = image_width, ncol = image_height, byrow = FALSE)
first_image_cimg <- as.cimg(first_image_matrix)

# Display the corrected first image
plot(first_image_cimg, main = "Corrected First Image")

```


```{r}

# Function to apply median subtraction to a matrix
apply_median_subtraction <- function(flat_matrix) {
  # Reshape each row to 255x255, process, and flatten back
  processed_matrix <- matrix(0, nrow=nrow(flat_matrix), ncol=ncol(flat_matrix))
  
  for(i in 1:nrow(flat_matrix)) {
    # Reshape to 255x255
    img_matrix <- matrix(flat_matrix[i,], nrow=255, ncol=255)
    
    # Process each column
    for(j in 1:255) {
      col_median <- median(img_matrix[,j])
      # Subtract median and cap at 0
      img_matrix[,j] <- pmax(img_matrix[,j] - col_median, 0)
    }
    
    # Flatten and store
    processed_matrix[i,] <- as.vector(img_matrix)
  }
  
  return(processed_matrix)
}

# Apply to each reconstruction
final_median <- apply_median_subtraction(reconstruction_median)
final_25th <- apply_median_subtraction(reconstruction_25th)
final_75th <- apply_median_subtraction(reconstruction_75th)

```





```{r}

# Apply the transpose fix to all rows (images) in the image matrix
fixed_image_matrix <- t(apply(final_median, 1, process_image))

# Optional: Display the first image from the fixed matrix
first_image_vector <- fixed_image_matrix[31, ]
first_image_matrix <- matrix(first_image_vector, nrow = image_width, ncol = image_height, byrow = FALSE)
first_image_cimg <- as.cimg(first_image_matrix)

# Display the corrected first image
plot(first_image_cimg, main = "Corrected First Image")

```






